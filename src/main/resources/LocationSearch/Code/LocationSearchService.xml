<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="LocationSearch.Code.LocationSearchService" locale="">
  <web>LocationSearch.Code</web>
  <name>LocationSearchService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>xwiki:XWiki.Admin</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>LocationSearchService</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($discard = $response.setContentType("application/json"))
#set ($solrSpecialChars = ['+', '-', '&amp;&amp;', '||', '!', '(', ')', '{', '}', '[', ']', '^', '"', '~', '*', '?', ':', '/', '\', ' '])
#set ($escapedSolrSpecialChars = ['\+', '\-', '&amp;&amp;', '\||', '\!', '\(', '\)', '\{', '\}', '\[', '\]', '\^', '\"', '\~', '\*', '\?', '\:', '\/', '\\', '\ '])
#macro(escapeSolr $v)
$stringtool.replaceEach($v, $solrSpecialChars, $escapedSolrSpecialChars)##
#end

#set ($fields = {
  "all": "title^2 name doccontent^2 doccontentraw filename attcontent property.XWiki.XWikiComments.comment objcontent propertyvalue",
  "content": "doccontent^2 doccontentraw",
  "title": "title^2",
  "attachment": "filename attcontent",
  "attachmentName": "filename",
  "attachmentContent": "attcontent",
  "object": "objcontent propertyvalue",
  "comment": "property.XWiki.XWikiComments.comment"
})

#set ($q = "$!request.q")
#set ($wiki = "$!request.wiki")
#if ($wiki == "")
  #set ($wiki = $xcontext.database)
#end
#set ($kind = "$!request.kind")
#if ($kind != "")
  #set ($discard = $query.bindValue("qf", [$fields[$request.kind]]))
#end
#set ($attachmentNameEnabled = $kind == "all" || $kind == "attachmentName" || $kind == "attachment")
#set ($titleStartsWithSearch = '')
#set ($titleSearch = '')
#set ($normalSearch = '')
#foreach ($word in $q.split("[\s]+"))
  #if ($foreach.first)
    #set ($AND = "")
  #else
    #set ($AND = " AND ")
  #end
  #set ($escapedWord = "#escapeSolr($word)")
  #set ($quotedEscapedWord = "$escapetool.Q$escapedWord$escapetool.Q")
  #set ($titleSearch = "$titleSearch$AND*$escapedWord*")
  #set ($titleStartsWithSearch = "$titleStartsWithSearch$AND$escapedWord*")
  #set ($normalSearch = "$normalSearch$AND$quotedEscapedWord")
#end
#set ($queryString = "title:($titleStartsWithSearch)^3 OR title:($titleSearch)^2 OR ($normalSearch)^1")
#if ($attachmentNameEnabled)
  #set ($queryString = "$queryString filename:($titleStartsWithSearch)^3 OR filename:($titleSearch)^2")
#end
#set ($query = $services.query.createQuery($queryString, "solr").setWiki($wiki))
#if ("$!request.excerpts" == "1")
  #set ($discard = $query.bindValue('hl', true))
#end
#set ($fq = ["hidden:false", "type:DOCUMENT"])
#set ($tags = "$!request.tags")
#if ($tags != "")
  #set ($escapedTags = "")
  #foreach ($tag in $tags.split(","))
    #set ($escapedTags = "$escapedTags #escapeSolr($tag)")
  #end
  #set ($discard = $fq.add("property.XWiki.TagClass.tags_string:($escapedTags.trim())"))
#end
#set ($facetFilter = "")
#foreach ($spaceFacet in $request.getParameterValues("spaceFacet"))
  #set ($facetFilter = $facetFilter + "#escapeSolr($spaceFacet)")
  #if (!$foreach.last)
    #set ($facetFilter = "$facetFilter OR ")
  #end
#end
#if (!$facetFilter.isEmpty())
  #set ($discard = $fq.add("space_facet:($facetFilter)"))
#end
#set ($className = "$!request.className")
#if ($className != "")
  #set ($discard = $fq.add("class:#escapeSolr($className)"))
#end
#set ($discard = $query.bindValue("fq", $fq))
#set ($discard = $query.setLimit($request.nb))
#set ($searchResponse = $query.execute()[0])
#set ($discard = $response.writer.write('['))
#foreach ($result in $searchResponse.results)
  #set ($location = [])
  #set ($docRef = $services.model.resolveDocument("$wiki:$result.fullname"))
  #foreach ($part in $docRef.getSpaceReferences())
    #set($discard = $location.add({
      "id": $part.name,
      "title": $xwiki.getDocument("$wiki:${services.model.serialize($part)}.WebHome").title
    }))
  #end
  #set ($resultDoc = $xwiki.getDocument($docRef))
  #set ($r = {
    "docFullName": $services.model.serialize($docRef, "default"),
    "docTitle":  $resultDoc.title,
    "type": $result.type,
    "kind": "",
    "location": $location,
    "url": $xwiki.getURL($resultDoc)
  })
  #if ($r.kind == "" &amp;&amp; ($kind == "all" || $kind == "comment"))
    #foreach ($key in $result.keySet())
      #if ($key.startsWith("property.XWiki.XWikiComments.comment_"))
        #set ($i = 0)
        #foreach ($comment in $result[$key])
          #if ($stringtool.containsIgnoreCase($comment, $q))
            #set($r.commentAuthor = $result['property.XWiki.XWikiComments.author_string'][$i])
            #set($r.commentDate = $result['property.XWiki.XWikiComments.date_date'][$i])
            #set($r.kind = "comment")
            #set($r.url = $xwiki.getURL($docRef, "view", "", "Comments"))
            #break
          #end
          #set ($i = $i + 1)
        #end
        #if ($r.kind != "")
          #break
        #end
      #end
    #end
  #end
  #if ($r.kind == "" &amp;&amp; $attachmentNameEnabled)
    #foreach ($filename in $result.filename)
      #if ($stringtool.containsIgnoreCase($filename, $q))
        #set($r.attachmentFilename = $filename)
        #set($r.kind = "attachmentName")
        #set($r.url = "${xwiki.getURL($resultDoc, 'download')}/$filename")
        #break
      #end
    #end
  #end
  #if ($r.kind == "" &amp;&amp; ($kind == "all" || $kind == "attachmentContent" || $kind == "attachment"))
    #foreach ($key in $result.keySet())
      #if ($key.startsWith("attcontent_"))
        #set ($i = 0)
        #foreach ($attcontent in $result[$key])
          #if ($stringtool.containsIgnoreCase($attcontent, $q))
            #set($filename = $result.filename[$i])
            #set($r.attachmentFilename = $filename)
            #set($r.kind = "attachmentContent")
            #set($r.url = "${xwiki.getURL($resultDoc, 'download')}/$filename")
            #set ($h = $searchResponse.highlighting[$result.id][$key])
            #if ($objecttool.isNotNull($h))
              #set ($r.excerpt = $h)
            #end
            #break
          #end
          #set ($i = $i + 1)
        #end
        #if ($r.kind != "")
          #break
        #end
      #end
    #end
  #end
  #if ($r.kind == "" &amp;&amp; ($kind == "all" || $kind == "object"))
    #foreach ($key in $result.keySet())
      #if ($key.startsWith("objcontent_"))
        #foreach ($propertyKeyValue in $result[$key])
          #if ($stringtool.containsIgnoreCase($propertyKeyValue, $q))
            #set($r.kind = "object")
            #set ($h = $searchResponse.highlighting[$result.id][$key])
            #if ($objecttool.isNotNull($h))
              #set ($r.excerpt = $h)
            #end
            #break
          #end
        #end
        #if ($r.kind != "")
          #break
        #end
      #end
    #end
  #end
  #if ($r.kind == "")
    #set($r.kind = "document")
  #end
  #if ($stringtool.isEmpty($r.excerpt))
    #if ($objecttool.isNotNull($searchResponse.highlighting[$result.id]))
      #foreach ($hKey in $searchResponse.highlighting[$result.id].keySet())
        #if ($hKey != "filename")
          #set ($r.excerpt = $searchResponse.highlighting[$result.id][$hKey])
          #if (!$hKey.startsWith("doccontentraw_"))
            #break
          #end
        #end
      #end
    #end
  #end
  #set ($discard = $response.writer.write($jsontool.serialize($r)))
  #if (!$foreach.last)
    $response.writer.write(',')
  #end
#end
#set ($discard = $response.writer.write(']'))
#set ($discard = $xcontext.setFinished(true))
{{/velocity}}</content>
</xwikidoc>
